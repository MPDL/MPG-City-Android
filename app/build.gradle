plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "de.mpg.mpdl.mpgcity"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 106
        versionName "1.0.6"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.mpg_config["key-alias"]
            keyPassword rootProject.ext.mpg_config["key-password"]
            storeFile file('../MpgCityKey.jks')
            storePassword rootProject.ext.mpg_config["store-password"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "BUGLY_APP_ID", rootProject.ext.mpg_config["bugly-app-id"]
            buildConfigField "String", "YOUTUBE_API_KEY", rootProject.ext.mpg_config["youtube_api_key"]


        }
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "BUGLY_APP_ID", rootProject.ext.mpg_config["bugly-app-id"]
            buildConfigField "String", "YOUTUBE_API_KEY", rootProject.ext.mpg_config["youtube_api_key"]

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    applicationVariants.all {
        //release or debug
        def buildType = it.buildType.name
        def fileName
        if (buildType == "release") {
            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks")
        }
        it.outputs.each {
            if (buildType == "release") {
                fileName = "${buildType}_v${defaultConfig.versionName}.apk"
                println "文件名：-----------------${fileName}"
                //rename apk。(Earlier than Gradle4.0)
                //it.outputFile = new File(it.outputFile.parent, fileName)
                //rename apk。(Gradle4.0 and above)
                it.outputFileName = fileName
            }
        }
    }
}

dependencies {
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    def leakcanary_version = "1.6.3"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation project(path: ':mvvm')

    // leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"


    // Provides ARCore Session and related resources.
    implementation 'com.google.ar:core:1.15.0'
    // Provides ArFragment, and other UX resources.
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.10.0'
    // Alternatively, use ArSceneView without the UX dependency.
    implementation 'com.google.ar.sceneform:core:1.10.0'

    //Bugly
    implementation 'com.tencent.bugly:crashreport:latest.release'

    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:10.0.5'


}